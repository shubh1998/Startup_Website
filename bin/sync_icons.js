const { pascalize } = require('humps')
const fs = require('fs')
const glob = require('glob')

const iconsBasePath = 'src/components/ui-kit/icons'

const iconsSvgBasePath = `${iconsBasePath}/svg`
const iconsComponentsBasePath = `${iconsBasePath}/iconComponents`
if (!fs.existsSync(iconsComponentsBasePath)) {
  fs.mkdirSync(iconsComponentsBasePath, {
    recursive: true
  })
}
const filenames = glob.sync(`${iconsSvgBasePath}/**/*.svg`)

glob.sync(`${iconsSvgBasePath}/**/*.js?`).forEach(filename => fs.unlink(filename, () => {}))

const components = []
const componentGroups = []

for (const filename of filenames) {
  const baseFilename = filename.substr(iconsSvgBasePath.length + 1)
  const pieces = baseFilename.replace(/\.svg/, '').split(/\//)

  if (pieces.length === 0) {
    console.warn(`Icon name '${baseFilename}' doesn't match naming convention`)
    continue
  }

  const componentName = pieces.reverse().map(piece => pascalize(piece)).join('') + 'Icon'
  const componentFilename = `${iconsComponentsBasePath}/${componentName}.js`

  components.push(componentName)
  componentGroups.push(componentName)

  fs.writeFile(
    componentFilename,
    `// DO NOT EDIT THIS FILE. This file auto-generated, use \`npm run sync-icons\` to update icons\n
export { ReactComponent as ${componentName} } from '../svg/${baseFilename}'\n`,
    () => {}
  )
}

const storiesJs =
`import React from 'react'
import { Box } from '@mui/material'
${components.map(component => `import { ${component} } from './iconComponents/${component}'`).join('\n')}

export default {
  title: 'atoms/icons'
}

const Row = props => <Box p={2} {...props} />
const Cell = props => <Box display='inline-block' m={1} {...props} style={{ cursor: 'pointer' }} />

export const icons = () => (
  <Box>
    <Row>${componentGroups.map(component => (`
      ${`<Cell><${component} title='${component}' width={40} height={40} /></Cell>`}`)).join('\n')}
    </Row>
  </Box>
)
`

// Adding Storybook for all iconsV2
fs.writeFile(
  `${iconsBasePath}/icons.stories.jsx`,
  storiesJs,
  () => {}
)
